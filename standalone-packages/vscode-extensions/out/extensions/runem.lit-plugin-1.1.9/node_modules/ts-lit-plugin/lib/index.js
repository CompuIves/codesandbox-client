"use strict";
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
    result["default"] = mod;
    return result;
};
/* eslint-disable @typescript-eslint/no-explicit-any */
var lit_analyzer_1 = require("lit-analyzer");
var ts = __importStar(require("typescript"));
var web_component_analyzer_1 = require("web-component-analyzer");
var decorate_language_service_1 = require("./decorate-language-service");
var logger_1 = require("./logger");
var lit_plugin_context_1 = require("./ts-lit-plugin/lit-plugin-context");
var ts_lit_plugin_1 = require("./ts-lit-plugin/ts-lit-plugin");
var ts_module_1 = require("./ts-module");
var tsHtmlPluginSymbol = Symbol.for("__tsHtmlPlugin__");
var context = undefined;
/**
 * Export a function for the ts-service to initialize our plugin.
 * @param typescript
 */
function init(_a) {
    var typescript = _a.typescript;
    // Cache the typescript module
    ts_module_1.setTypescriptModule(typescript);
    /**
     * This function is used to print debug info once
     * Yes, it's a self destructing function!
     */
    var printDebugOnce = function () {
        if (logger_1.logger.level >= lit_analyzer_1.LitAnalyzerLoggerLevel.DEBUG) {
            logger_1.logger.debug("Lit Analyzer: " + lit_analyzer_1.VERSION);
            logger_1.logger.debug("Web Component Analyzer: " + web_component_analyzer_1.VERSION);
            logger_1.logger.debug("Installed Typescript: " + ts.version);
            logger_1.logger.debug("Running Typescript: " + typescript.version);
            logger_1.logger.debug("DIRNAME: " + __dirname);
            printDebugOnce = undefined;
        }
    };
    return {
        create: function (info) {
            // Check if the language service is already decorated
            if (info.languageService[tsHtmlPluginSymbol] != null) {
                return info.languageService;
            }
            // Save the current working directory
            info.config.cwd = info.config.cwd || info.project.getCurrentDirectory();
            // Extend existing language service with the plugin functions
            try {
                context = new lit_plugin_context_1.LitPluginContext({
                    ts: typescript,
                    getProgram: function () {
                        return info.languageService.getProgram();
                    },
                    getProject: function () {
                        return info.project;
                    }
                });
                context.updateConfig(lit_analyzer_1.makeConfig(info.config));
                logger_1.logger.verbose("Starting ts-lit-plugin...");
                if (printDebugOnce != null)
                    printDebugOnce();
                var plugin = new ts_lit_plugin_1.TsLitPlugin(info.languageService, context);
                var decoratedService = decorate_language_service_1.decorateLanguageService(info.languageService, plugin);
                // Save that we've extended this service to prevent extending it again
                decoratedService[tsHtmlPluginSymbol] = plugin;
                return decoratedService;
            }
            catch (e) {
                logger_1.logger.error("ts-lit-plugin crashed while decorating the language service...", e);
                return info.languageService;
            }
        },
        onConfigurationChanged: function (config) {
            if (context == null || config == null)
                return;
            context.updateConfig(lit_analyzer_1.makeConfig(config));
            if (printDebugOnce != null)
                printDebugOnce();
        }
    };
}
module.exports = init;
