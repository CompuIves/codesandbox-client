import {FileSystem} from './core/file_system';

/**
 * Мы используем 'typedoc' в файловом режиме, чтобы избежать многих проблем.
 * К сожалению, в некоторых случаях он не обрабатывает операторы экспорта должным образом.
 * Здесь мы переопределяем основной объект BrowserFS для целей документации.
 */

import {FileSystem as Backends, BFSRequire} from './index';

/**
 * Основной интерфейс BrowserFS.
 *
 * В браузере это отображается как глобальный файл `BrowserFS`.
 *
 * В узле это объект, который вы получаете, когда `require('browserfs')`.
 */
export interface BrowserFS {
  /**
   * Предоставляет все серверные части файловой системы, доступные в BrowserFS.
   */
  FileSystem: typeof Backends;
  /**
   * Эмулирует функцию Node `require ()` для модулей, связанных с файловой системой (`'fs'`, `'path'`, `'buffer'`, и т.д).
   */
  BFSRequire: typeof BFSRequire;
  /**
   * Вы должны вызвать эту функцию с правильно созданной корневой файловой системой 
   * перед использованием любого метода API файловой системы.
   * @param rootFS Корневая файловая система для использования 
   * всей файловой системы BrowserFS.
   */
  initialize(rootFS: FileSystem): void;
  /**
   * Устанавливает BrowserFS на указанный объект.
   * Мы рекомендуем вам запустить установку с объектом 'window', чтобы 
   * сделать вещи глобальными, как в Node.
   *
   * Установленные свойства:
   *
   * * Buffer
   * * process
   * * require (we monkey-patch it)
   *
   * Это позволяет вам писать код, как если бы вы работали внутри Node.
   * @param obj Объект для установки (например, window)
   */
  install(obj: any): void;
}
