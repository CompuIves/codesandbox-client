// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`<ProgressButton /> rendering basic 1`] = `
.c1 {
  -webkit-transition: 0.3s ease all;
  transition: 0.3s ease all;
  font-family: Poppins,Roboto,sans-serif;
  border: none;
  outline: none;
  background-color: #40A9F3;
  background-size: 720%;
  border: 2px solid #66B9F4;
  border-radius: 4px;
  box-sizing: border-box;
  font-size: 1.125em;
  text-align: center;
  color: white;
  font-weight: 600;
  width: inherit;
  -webkit-user-select: none;
  -moz-user-select: none;
  -ms-user-select: none;
  user-select: none;
  -webkit-text-decoration: none;
  text-decoration: none;
  padding: 0.65em 2.25em;
  cursor: pointer;
}

.c1:hover {
  background-color: #66b9f4;
}

.c0 {
  position: relative;
}

<ProgressButton>
  <Styled(ButtonComponent)
    disabled={false}
  >
    <StyledComponent
      disabled={false}
      forwardedComponent={
        Object {
          "$$typeof": Symbol(react.forward_ref),
          "attrs": Array [],
          "componentStyle": ComponentStyle {
            "componentId": "sc-bxivhb",
            "isStatic": true,
            "lastClassName": "c0",
            "rules": Array [
              "
  position: relative;
",
            ],
          },
          "displayName": "Styled(ButtonComponent)",
          "foldedComponentIds": Array [],
          "render": [Function],
          "styledComponentId": "sc-bxivhb",
          "target": [Function],
          "toString": [Function],
          "warnTooManyClasses": [Function],
          "withComponent": [Function],
        }
      }
      forwardedRef={null}
    >
      <ButtonComponent
        className="c0"
        disabled={false}
      >
        <styled.button
          className="c0"
          disabled={false}
          style={Object {}}
        >
          <StyledComponent
            className="c0"
            disabled={false}
            forwardedComponent={
              Object {
                "$$typeof": Symbol(react.forward_ref),
                "attrs": Array [],
                "componentStyle": ComponentStyle {
                  "componentId": "sc-htpNat",
                  "isStatic": false,
                  "lastClassName": "c1",
                  "rules": Array [
                    "
  ",
                    "
  transition: 0.3s ease all;
  font-family: Poppins, Roboto, sans-serif;

  border: none;
  outline: none;
  ",
                    [Function],
                    ";
  background-size: 720%;

  border: ",
                    [Function],
                    ";
  border-radius: 4px;

  box-sizing: border-box;
  font-size: 1.125em;
  text-align: center;
  color: ",
                    [Function],
                    ";
  font-weight: 600;
  width: ",
                    [Function],
                    ";

  user-select: none;
  text-decoration: none;

  ",
                    [Function],
                    ";

  /* svg {
     font-size: 1.125em;
  } */

  ",
                    [Function],
                    ";

  &:hover {
    ",
                    [Function],
                    ";
    ",
                    [Function],
                    ";
  }
",
                    ";
",
                  ],
                },
                "displayName": "styled.button",
                "foldedComponentIds": Array [],
                "render": [Function],
                "styledComponentId": "sc-htpNat",
                "target": "button",
                "toString": [Function],
                "warnTooManyClasses": [Function],
                "withComponent": [Function],
              }
            }
            forwardedRef={null}
            style={Object {}}
          >
            <button
              className="c0 c1"
              disabled={false}
              style={Object {}}
            >
              Click Me
            </button>
          </StyledComponent>
        </styled.button>
      </ButtonComponent>
    </StyledComponent>
  </Styled(ButtonComponent)>
</ProgressButton>
`;

exports[`<ProgressButton /> rendering disabled 1`] = `
.c1 {
  -webkit-transition: 0.3s ease all;
  transition: 0.3s ease all;
  font-family: Poppins,Roboto,sans-serif;
  border: none;
  outline: none;
  background-color: rgb(18,21,22);
  background-size: 720%;
  border: 2px solid #161A1C;
  border-radius: 4px;
  box-sizing: border-box;
  font-size: 1.125em;
  text-align: center;
  color: rgb(69,79,84);
  font-weight: 600;
  width: inherit;
  -webkit-user-select: none;
  -moz-user-select: none;
  -ms-user-select: none;
  user-select: none;
  -webkit-text-decoration: none;
  text-decoration: none;
  padding: 0.65em 2.25em;
}

.c1:hover {
  background-color: rgb(18,21,22);
}

.c0 {
  position: relative;
}

<ProgressButton
  disabled={true}
>
  <Styled(ButtonComponent)
    disabled={true}
  >
    <StyledComponent
      disabled={true}
      forwardedComponent={
        Object {
          "$$typeof": Symbol(react.forward_ref),
          "attrs": Array [],
          "componentStyle": ComponentStyle {
            "componentId": "sc-bxivhb",
            "isStatic": true,
            "lastClassName": "c0",
            "rules": Array [
              "
  position: relative;
",
            ],
          },
          "displayName": "Styled(ButtonComponent)",
          "foldedComponentIds": Array [],
          "render": [Function],
          "styledComponentId": "sc-bxivhb",
          "target": [Function],
          "toString": [Function],
          "warnTooManyClasses": [Function],
          "withComponent": [Function],
        }
      }
      forwardedRef={null}
    >
      <ButtonComponent
        className="c0"
        disabled={true}
      >
        <styled.button
          className="c0"
          disabled={true}
          style={Object {}}
        >
          <StyledComponent
            className="c0"
            disabled={true}
            forwardedComponent={
              Object {
                "$$typeof": Symbol(react.forward_ref),
                "attrs": Array [],
                "componentStyle": ComponentStyle {
                  "componentId": "sc-htpNat",
                  "isStatic": false,
                  "lastClassName": "c1",
                  "rules": Array [
                    "
  ",
                    "
  transition: 0.3s ease all;
  font-family: Poppins, Roboto, sans-serif;

  border: none;
  outline: none;
  ",
                    [Function],
                    ";
  background-size: 720%;

  border: ",
                    [Function],
                    ";
  border-radius: 4px;

  box-sizing: border-box;
  font-size: 1.125em;
  text-align: center;
  color: ",
                    [Function],
                    ";
  font-weight: 600;
  width: ",
                    [Function],
                    ";

  user-select: none;
  text-decoration: none;

  ",
                    [Function],
                    ";

  /* svg {
     font-size: 1.125em;
  } */

  ",
                    [Function],
                    ";

  &:hover {
    ",
                    [Function],
                    ";
    ",
                    [Function],
                    ";
  }
",
                    ";
",
                  ],
                },
                "displayName": "styled.button",
                "foldedComponentIds": Array [],
                "render": [Function],
                "styledComponentId": "sc-htpNat",
                "target": "button",
                "toString": [Function],
                "warnTooManyClasses": [Function],
                "withComponent": [Function],
              }
            }
            forwardedRef={null}
            style={Object {}}
          >
            <button
              className="c0 c1"
              disabled={true}
              style={Object {}}
            >
              Click Me
            </button>
          </StyledComponent>
        </styled.button>
      </ButtonComponent>
    </StyledComponent>
  </Styled(ButtonComponent)>
</ProgressButton>
`;

exports[`<ProgressButton /> rendering loading 1`] = `
.c1 {
  -webkit-transition: 0.3s ease all;
  transition: 0.3s ease all;
  font-family: Poppins,Roboto,sans-serif;
  border: none;
  outline: none;
  background-color: rgb(18,21,22);
  background-size: 720%;
  border: 2px solid #161A1C;
  border-radius: 4px;
  box-sizing: border-box;
  font-size: 1.125em;
  text-align: center;
  color: rgb(69,79,84);
  font-weight: 600;
  width: inherit;
  -webkit-user-select: none;
  -moz-user-select: none;
  -ms-user-select: none;
  user-select: none;
  -webkit-text-decoration: none;
  text-decoration: none;
  padding: 0.65em 2.25em;
}

.c1:hover {
  background-color: rgb(18,21,22);
}

.c0 {
  position: relative;
}

.c2 {
  position: absolute;
  top: 50%;
  left: 50%;
  -webkit-transform: translate(-50%,-50%);
  -ms-transform: translate(-50%,-50%);
  transform: translate(-50%,-50%);
  width: 8px;
  height: 8px;
  border-radius: 50%;
  background: #40A9F3;
  opacity: 0.7;
  -webkit-animation: epZxiO 1s infinite linear alternate;
  animation: epZxiO 1s infinite linear alternate;
  -webkit-animation-delay: 0.5s;
  animation-delay: 0.5s;
}

.c2:before {
  content: ' ';
  position: absolute;
  left: -12px;
  width: 8px;
  height: 8px;
  border-radius: 50%;
  background: #40A9F3;
  opacity: 0.7;
  -webkit-animation: epZxiO 1s infinite linear alternate;
  animation: epZxiO 1s infinite linear alternate;
  -webkit-animation-delay: 0s;
  animation-delay: 0s;
}

.c2:after {
  content: ' ';
  position: absolute;
  left: 12px;
  width: 8px;
  height: 8px;
  border-radius: 50%;
  background: #40A9F3;
  opacity: 0.7;
  -webkit-animation: epZxiO 1s infinite linear alternate;
  animation: epZxiO 1s infinite linear alternate;
  -webkit-animation-delay: 1s;
  animation-delay: 1s;
}

<ProgressButton
  loading={true}
>
  <Styled(ButtonComponent)
    disabled={true}
  >
    <StyledComponent
      disabled={true}
      forwardedComponent={
        Object {
          "$$typeof": Symbol(react.forward_ref),
          "attrs": Array [],
          "componentStyle": ComponentStyle {
            "componentId": "sc-bxivhb",
            "isStatic": true,
            "lastClassName": "c0",
            "rules": Array [
              "
  position: relative;
",
            ],
          },
          "displayName": "Styled(ButtonComponent)",
          "foldedComponentIds": Array [],
          "render": [Function],
          "styledComponentId": "sc-bxivhb",
          "target": [Function],
          "toString": [Function],
          "warnTooManyClasses": [Function],
          "withComponent": [Function],
        }
      }
      forwardedRef={null}
    >
      <ButtonComponent
        className="c0"
        disabled={true}
      >
        <styled.button
          className="c0"
          disabled={true}
          style={Object {}}
        >
          <StyledComponent
            className="c0"
            disabled={true}
            forwardedComponent={
              Object {
                "$$typeof": Symbol(react.forward_ref),
                "attrs": Array [],
                "componentStyle": ComponentStyle {
                  "componentId": "sc-htpNat",
                  "isStatic": false,
                  "lastClassName": "c1",
                  "rules": Array [
                    "
  ",
                    "
  transition: 0.3s ease all;
  font-family: Poppins, Roboto, sans-serif;

  border: none;
  outline: none;
  ",
                    [Function],
                    ";
  background-size: 720%;

  border: ",
                    [Function],
                    ";
  border-radius: 4px;

  box-sizing: border-box;
  font-size: 1.125em;
  text-align: center;
  color: ",
                    [Function],
                    ";
  font-weight: 600;
  width: ",
                    [Function],
                    ";

  user-select: none;
  text-decoration: none;

  ",
                    [Function],
                    ";

  /* svg {
     font-size: 1.125em;
  } */

  ",
                    [Function],
                    ";

  &:hover {
    ",
                    [Function],
                    ";
    ",
                    [Function],
                    ";
  }
",
                    ";
",
                  ],
                },
                "displayName": "styled.button",
                "foldedComponentIds": Array [],
                "render": [Function],
                "styledComponentId": "sc-htpNat",
                "target": "button",
                "toString": [Function],
                "warnTooManyClasses": [Function],
                "withComponent": [Function],
              }
            }
            forwardedRef={null}
            style={Object {}}
          >
            <button
              className="c0 c1"
              disabled={true}
              style={Object {}}
            >
              Click Me
              <styled.div>
                <StyledComponent
                  forwardedComponent={
                    Object {
                      "$$typeof": Symbol(react.forward_ref),
                      "attrs": Array [],
                      "componentStyle": ComponentStyle {
                        "componentId": "sc-ifAKCX",
                        "isStatic": true,
                        "lastClassName": "c2",
                        "rules": Array [
                          "
  position: absolute;
  top: 50%;
  left: 50%;
  transform: translate(-50%, -50%);
  ",
                          "
  width: 8px;
  height: 8px;
  border-radius: 50%;
  background: ",
                          "#40A9F3",
                          ";
  opacity: 0.7;
  animation: ",
                          Keyframes {
                            "id": "sc-keyframes-epZxiO",
                            "inject": [Function],
                            "name": "epZxiO",
                            "rules": Array [
                              "@-webkit-keyframes epZxiO{0%{background-color:#40A9F3;}50%,100%{background-color:rgb(207,233,252);}}",
                              "@keyframes epZxiO{0%{background-color:#40A9F3;}50%,100%{background-color:rgb(207,233,252);}}",
                            ],
                            "toString": [Function],
                          },
                          " 1s infinite linear alternate;
",
                          " animation-delay: 0.5s;

  &:before {
    content: ' ';
    position: absolute;
    left: -12px;
    ",
                          "
  width: 8px;
  height: 8px;
  border-radius: 50%;
  background: ",
                          "#40A9F3",
                          ";
  opacity: 0.7;
  animation: ",
                          Keyframes {
                            "id": "sc-keyframes-epZxiO",
                            "inject": [Function],
                            "name": "epZxiO",
                            "rules": Array [
                              "@-webkit-keyframes epZxiO{0%{background-color:#40A9F3;}50%,100%{background-color:rgb(207,233,252);}}",
                              "@keyframes epZxiO{0%{background-color:#40A9F3;}50%,100%{background-color:rgb(207,233,252);}}",
                            ],
                            "toString": [Function],
                          },
                          " 1s infinite linear alternate;
",
                          ";
    animation-delay: 0s;
  }

  &:after {
    content: ' ';
    position: absolute;
    left: 12px;
    ",
                          "
  width: 8px;
  height: 8px;
  border-radius: 50%;
  background: ",
                          "#40A9F3",
                          ";
  opacity: 0.7;
  animation: ",
                          Keyframes {
                            "id": "sc-keyframes-epZxiO",
                            "inject": [Function],
                            "name": "epZxiO",
                            "rules": Array [
                              "@-webkit-keyframes epZxiO{0%{background-color:#40A9F3;}50%,100%{background-color:rgb(207,233,252);}}",
                              "@keyframes epZxiO{0%{background-color:#40A9F3;}50%,100%{background-color:rgb(207,233,252);}}",
                            ],
                            "toString": [Function],
                          },
                          " 1s infinite linear alternate;
",
                          ";
    animation-delay: 1s;
  }
",
                        ],
                      },
                      "displayName": "styled.div",
                      "foldedComponentIds": Array [],
                      "render": [Function],
                      "styledComponentId": "sc-ifAKCX",
                      "target": "div",
                      "toString": [Function],
                      "warnTooManyClasses": [Function],
                      "withComponent": [Function],
                    }
                  }
                  forwardedRef={null}
                >
                  <div
                    className="c2"
                  />
                </StyledComponent>
              </styled.div>
            </button>
          </StyledComponent>
        </styled.button>
      </ButtonComponent>
    </StyledComponent>
  </Styled(ButtonComponent)>
</ProgressButton>
`;
