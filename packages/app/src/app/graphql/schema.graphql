# source: https://codesandbox.stream/api/graphql
# timestamp: Wed Apr 08 2020 10:19:39 GMT+0200 (Central European Summer Time)

schema {
  query: RootQuery
  mutation: RootMutation
  subscription: RootSubscriptionType
}

enum Authorization {
  COMMENT
  NONE
  OWNER
  READ
  WRITE_CODE
  WRITE_PROJECT
}

type Bookmarked {
  entity: BookmarkEntity
  isBookmarked: Boolean
}

"""
A team or the current user
"""
union BookmarkEntity = Team | User

input CodeReference {
  anchor: Int!
  code: String!
  head: Int!
  path: String!
}

type CodeReferenceMetadata {
  anchor: Int!
  code: String!
  head: Int!
  path: String!
}

"""
A collaborator on a sandbox
"""
type Collaborator {
  authorization: Authorization!
  id: ID!
  lastSeenAt: DateTime
  sandbox: Sandbox!
  user: User!
  warning: String
}

type Collection {
  id: ID
  path: String!
  sandboxes: [Sandbox!]!
  team: Team
  teamId: ID
  user: User
}

"""
A comment on a sandbox. A comment can also have replies and references.
"""
type Comment {
  comments: [Comment!]!
  content: String
  id: ID!
  insertedAt: NaiveDateTime!
  isRead: Boolean!
  isResolved: Boolean!
  parentComment: Comment
  references: [Reference!]!
  replyCount: Int!
  sandbox: Sandbox!
  updatedAt: NaiveDateTime!
  user: User!
}

type CurrentUser {
  bookmarkedTemplates: [Template!]!
  collection(path: String!, teamId: ID): Collection
  collections(teamId: ID): [Collection!]!
  email: String!
  firstName: String
  id: ID!
  lastName: String
  notifications(limit: Int, orderBy: OrderBy): [Notification]
  recentlyUsedTemplates: [Template!]!
  sandboxes(limit: Int, orderBy: OrderBy, showDeleted: Boolean): [Sandbox!]!
  team(id: ID!): Team
  teams: [Team!]!
  templates(showAll: Boolean, teamId: ID): [Template!]!
  username: String!
}

"""
The `DateTime` scalar type represents a date and time in the UTC
timezone. The DateTime appears in a JSON response as an ISO8601 formatted
string, including UTC timezone ("Z"). The parsed date and time string will
be converted to UTC and any UTC offset other than 0 will be rejected.
"""
scalar DateTime

enum Direction {
  ASC
  DESC
}

type Git {
  branch: String
  commitSha: String
  id: ID
  path: String
  repo: String
  username: String
}

"""
An invitation to a sandbox
"""
type Invitation {
  authorization: Authorization!
  email: String
  id: ID
  sandbox: Sandbox!
  token: String!
}

"""
The `Naive DateTime` scalar type represents a naive date and time without
timezone. The DateTime appears in a JSON response as an ISO8601 formatted
string.
"""
scalar NaiveDateTime

type Notification {
  data: String
  id: ID
  read: Boolean
  type: String
}

input OrderBy {
  direction: Direction!
  field: String!
}

type Reference {
  id: ID!
  metadata: ReferenceMetadata!
  resource: String!
  type: String!
}

"""
The metadata of a reference
"""
union ReferenceMetadata = CodeReferenceMetadata

type RootMutation {
  """
  Unbookmark a template
  """
  unbookmarkTemplate(teamId: ID, templateId: ID!): Template

  """
  bookmark a template
  """
  bookmarkTemplate(teamId: ID, templateId: ID!): Template

  """
  Create a collection
  """
  createCollection(path: String!, teamId: ID): Collection!

  """
  Rename a collection and all subfolders
  """
  renameCollection(
    newPath: String!
    newTeamId: ID
    path: String!
    teamId: ID
  ): [Collection!]!

  """
  Add a collaborator
  """
  addCollaborator(
    authorization: Authorization!
    sandboxId: ID!
    username: String!
  ): Collaborator!

  """
  Delete a collection and all subfolders
  """
  deleteCollection(path: String!, teamId: ID): [Collection!]!

  """
  Accept an invitation to a team
  """
  acceptTeamInvitation(teamId: ID!): Team
  permanentlyDeleteSandboxes(sandboxIds: [ID!]!): [Sandbox!]!

  """
  Change authorization of a collaborator
  """
  changeCollaboratorAuthorization(
    authorization: Authorization!
    sandboxId: ID!
    username: String!
  ): Collaborator!
  revokeSandboxInvitation(invitationId: ID!, sandboxId: ID!): Invitation!
  createComment(
    codeReference: CodeReference
    content: String!
    id: ID
    parentCommentId: ID
    sandboxId: ID!
  ): Comment!

  """
  Mark all notifications as read
  """
  markAllNotificationsAsRead: User

  """
  Remove someone from a team
  """
  removeFromTeam(teamId: ID!, userId: ID!): Team
  renameSandbox(id: ID!, title: String!): Sandbox!

  """
  Remove a collaborator
  """
  removeCollaborator(sandboxId: ID!, username: String!): Collaborator!
  resolveComment(commentId: ID!, sandboxId: ID!): Comment!

  """
  Convert templates back to sandboxes
  """
  unmakeSandboxesTemplates(sandboxIds: [ID!]!): [Template!]!

  """
  Revoke an invitation to a team
  """
  revokeTeamInvitation(teamId: ID!, userId: ID!): Team

  """
  Add sandboxes to a collection
  """
  addToCollection(
    collectionPath: String!
    sandboxIds: [ID]!
    teamId: ID
  ): Collection!

  """
  Invite someone to a team
  """
  inviteToTeam(teamId: ID!, username: String): Team

  """
  Create a team
  """
  createTeam(name: String!): Team
  updateComment(commentId: ID!, content: String, sandboxId: ID!): Comment!

  """
  Set the description of the team
  """
  setTeamDescription(description: String!, teamId: ID!): Team

  """
  Make templates from sandboxes
  """
  makeSandboxesTemplates(sandboxIds: [ID!]!): [Template!]!
  unresolveComment(commentId: ID!, sandboxId: ID!): Comment!

  """
  Clear notification unread count
  """
  clearNotificationCount: User

  """
  Soft delete a comment. Note: all child comments will also be deleted.
  """
  deleteComment(commentId: ID!, sandboxId: ID!): Comment!

  """
  Delete sandboxes
  """
  deleteSandboxes(sandboxIds: [ID!]!): [Sandbox!]!

  """
  Reject an invitation to a team
  """
  rejectTeamInvitation(teamId: ID!): String
  setSandboxesPrivacy(privacy: Int, sandboxIds: [ID!]!): [Sandbox!]!
  createSandboxInvitation(
    authorization: Authorization!
    email: String!
    sandboxId: ID!
  ): Invitation!

  """
  Leave a team
  """
  leaveTeam(teamId: ID!): String
  changeSandboxInvitationAuthorization(
    authorization: Authorization!
    invitationId: ID!
    sandboxId: ID!
  ): Invitation!
  redeemSandboxInvitation(invitationToken: String!, sandboxId: ID!): Invitation!
}

type RootQuery {
  """
  Get current user
  """
  me: CurrentUser

  """
  Get a sandbox
  """
  sandbox(sandboxId: ID!): Sandbox
}

type RootSubscriptionType {
  collaboratorAdded(sandboxId: ID!): Collaborator!
  collaboratorChanged(sandboxId: ID!): Collaborator!
  collaboratorRemoved(sandboxId: ID!): Collaborator!
  commentAdded(sandboxId: ID!): Comment!
  commentChanged(sandboxId: ID!): Comment!
  commentRemoved(sandboxId: ID!): Comment!
  invitationChanged(sandboxId: ID!): Invitation!
  invitationCreated(sandboxId: ID!): Invitation!
  invitationRemoved(sandboxId: ID!): Invitation!
  sandboxChanged(sandboxId: ID!): Sandbox!
}

"""
A Sandbox
"""
type Sandbox {
  alias: String
  author: User
  authorization: Authorization!
  collaborators: [Collaborator!]!
  collection: Collection
  comment(commentId: ID!): Comment
  comments: [Comment!]!

  """
  If the sandbox is a template this will be set
  """
  customTemplate: Template
  description: String
  forkedTemplate: Template

  """
  If the sandbox has a git repo tied to it this will be set
  """
  git: Git
  id: ID!
  insertedAt: String!
  invitations: [Invitation!]!
  privacy: Int!
  removedAt: String
  screenshotOutdated: Boolean!
  screenshotUrl: String
  source: Source!
  title: String
  updatedAt: String!
}

type Source {
  id: ID
  template: String
}

type Team {
  bookmarkedTemplates: [Template!]!
  collections: [Collection!]!
  creatorId: ID
  description: String
  id: ID!
  invitees: [User!]!
  name: String!
  templates: [Template!]!
  users: [User!]!
}

"""
A Template
"""
type Template {
  bookmarked: [Bookmarked]
  color: String
  description: String
  iconUrl: String
  id: ID
  insertedAt: String
  published: Boolean
  sandbox: Sandbox
  title: String
  updatedAt: String
}

"""
A CodeSandbox User
"""
type User {
  avatarUrl: String!
  firstName: String
  id: ID!
  lastName: String
  name: String
  username: String!
}
