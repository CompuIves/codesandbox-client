# source: https://codesandbox.stream/api/graphql
# timestamp: Fri Jan 31 2020 13:46:04 GMT+0000 (Greenwich Mean Time)

schema {
  query: RootQuery
  mutation: RootMutation
}

type Bookmarked {
  entity: BookmarkEntity
  isBookmarked: Boolean
}

"""
A team or the current user
"""
union BookmarkEntity = Team | User

type Collection {
  id: ID
  path: String
  sandboxes: [Sandbox]
  team: Team
  teamId: ID
  user: User
}

type CurrentUser {
  bookmarkedTemplates: [Template]
  collection(path: String!, teamId: ID): Collection
  collections(teamId: ID): [Collection]
  email: String
  firstName: String
  id: ID
  lastName: String
  notifications(limit: Int, orderBy: OrderBy): [Notification]
  recentlyUsedTemplates: [Template]
  sandboxes(limit: Int, orderBy: OrderBy, showDeleted: Boolean): [Sandbox]
  team(id: ID!): Team
  teams: [Team]
  templates(showAll: Boolean, teamId: ID): [Template]
  username: String
}

enum Direction {
  ASC
  DESC
}

type Git {
  branch: String
  commitSha: String
  id: ID
  path: String
  repo: String
  username: String
}

type Notification {
  data: String
  id: ID
  read: Boolean
  type: String
}

input OrderBy {
  direction: Direction!
  field: String!
}

type RootMutation {
  """
  Accept an invitation to a team
  """
  acceptTeamInvitation(teamId: ID!): Team

  """
  Add sandboxes to a collection
  """
  addToCollection(
    collectionPath: String!
    sandboxIds: [ID]!
    teamId: ID
  ): Collection

  """
  bookmark a template
  """
  bookmarkTemplate(teamId: ID, templateId: ID!): Template

  """
  Clear notification unread count
  """
  clearNotificationCount: User

  """
  Create a collection
  """
  createCollection(path: String!, teamId: ID): Collection

  """
  Create a team
  """
  createTeam(name: String!): Team

  """
  Delete a collection and all subfolders
  """
  deleteCollection(path: String!, teamId: ID): [Collection]

  """
  Delete sandboxes
  """
  deleteSandboxes(sandboxIds: [ID]!): [Sandbox]

  """
  Invite someone to a team
  """
  inviteToTeam(teamId: ID!, username: String): Team

  """
  Leave a team
  """
  leaveTeam(teamId: ID!): String

  """
  Make templates from sandboxes
  """
  makeSandboxesTemplates(sandboxIds: [ID]!): [Template]
  permanentlyDeleteSandboxes(sandboxIds: [ID]!): [Sandbox]

  """
  Reject an invitation to a team
  """
  rejectTeamInvitation(teamId: ID!): String

  """
  Remove someone from a team
  """
  removeFromTeam(teamId: ID!, userId: ID!): Team

  """
  Rename a collection and all subfolders
  """
  renameCollection(
    newPath: String!
    newTeamId: ID
    path: String!
    teamId: ID
  ): [Collection]
  renameSandbox(id: ID!, title: String!): Sandbox

  """
  Revoke an invitation to a team
  """
  revokeTeamInvitation(teamId: ID!, userId: ID!): Team
  setSandboxesPrivacy(privacy: Int, sandboxIds: [ID]!): [Sandbox]

  """
  Set the description of the team
  """
  setTeamDescription(description: String!, teamId: ID!): Team

  """
  Unbookmark a template
  """
  unbookmarkTemplate(teamId: ID, templateId: ID!): Template

  """
  Convert templates back to sandboxes
  """
  unmakeSandboxesTemplates(sandboxIds: [ID]!): [Template]
}

type RootQuery {
  """
  Get current user
  """
  me: CurrentUser

  """
  Get a sandbox
  """
  sandbox(sandboxId: ID!): Sandbox
}

"""
A Sandbox
"""
type Sandbox {
  alias: String
  author: User
  collection: Collection

  """
  If the sandbox is a template this will be set
  """
  customTemplate: Template
  description: String
  forkedTemplate: Template

  """
  If the sandbox has a git repo tied to it this will be set
  """
  git: Git
  id: ID
  insertedAt: String
  privacy: Int
  removedAt: String
  screenshotOutdated: Boolean
  screenshotUrl: String
  source: Source
  title: String
  updatedAt: String
}

type Source {
  id: ID
  template: String
}

type Team {
  bookmarkedTemplates: [Template]
  collections: [Collection]
  creatorId: ID
  description: String
  id: ID
  invitees: [User]
  name: String
  templates: [Template]
  users: [User]
}

"""
A Template
"""
type Template {
  bookmarked: [Bookmarked]
  color: String
  description: String
  iconUrl: String
  id: ID
  insertedAt: String
  published: Boolean
  sandbox: Sandbox
  title: String
  updatedAt: String
}

"""
A CodeSandbox User
"""
type User {
  avatarUrl: String
  email: String
  firstName: String
  id: ID
  lastName: String
  name: String
  username: String
}
